import os
import numpy as np
import argparse
import csv
from sklearn.feature_extraction.text import TfidfVectorizer
#https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html#sklearn.feature_extraction.text.TfidfVectorizer


#exract the absolute path for a filename and push it to a  list
def absoluteFilePaths(directory):
    res = []
    for dirpath,_,filenames in os.walk(directory):
       for f in filenames:
           res+= [os.path.abspath(os.path.join(dirpath, f))]
    return res


def read_data():
    dataset_dir = "../drebin/feature_vectors"
    # list that contains the list of all the files contained in dataset_dir
    files_list = absoluteFilePaths(dataset_dir)

    benign_list = []
    malware_list = []

    with open('../drebin/sha256_family.csv') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        line_count = 0
        for row in csv_reader:
            if line_count == 0:
                print("reading csv for Bad guys")
                line_count += 1
            else:
                malware_list+= [dataset_dir +"/"+ row[0]]
                line_count += 1
        print(f'Processed {line_count} lines.')

    benign_list = [good for good in files_list[:1000] if good not in malware_list]
    return benign_list,malware_list[:1000]



def create_feature_vector(benign_list,malware_list):
    # we have bening + malign , so we then create the trainig set X
    # NOTE in the following the order will be the same : benign_file_list + malign_file_list
    vectorizer = TfidfVectorizer(input="filename", tokenizer=lambda x: x.split('\n'), token_pattern=None, binary=True)
    X = vectorizer.fit_transform( benign_list + malware_list )
    # now the target labels, since the lists are in the same domain we just create 2 vector (one for each domain) and then we merge them
    y_malign = np.ones(len(malware_list))
    y_benign = np.empty(len(benign_list))
    y_benign.fill(-1)
    Y = np.concatenate( ( y_benign , y_malign ) , axis=None)
    return X,Y



def main():
    b, m = read_data()
    x,y = create_feature_vector(b,m)
    print(x.shape)
    print(y.shape)
    print(len(b))
    print(len(m))




main()
